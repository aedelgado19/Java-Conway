import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JFrame;


public class Life implements MouseListener, ActionListener, Runnable {
	
	//declare variables
	boolean[][] cells = new boolean[10][10];
	JFrame frame = new JFrame("Life Simulation");
	LifePanel panel = new LifePanel(cells);
	Container south = new Container();
	JButton step = new JButton("Step");
	JButton start = new JButton("Start");
	JButton stop = new JButton("Stop");
	boolean running = false;                                                             
	
	//Create frame and set stuff up
	public Life() {
		frame.setSize(600,640);
		frame.setLayout(new BorderLayout());
		frame.add(panel, BorderLayout.CENTER);
		panel.addMouseListener(this);
		
		//South Container
		
		south.setLayout(new GridLayout(1,3));
		south.add(step);
		step.addActionListener(this);;
		south.add(start);
		start.addActionListener(this);
		south.add(stop);
		stop.addActionListener(this);
		frame.add(south, BorderLayout.SOUTH);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	public static void main(String[] args) {
		new Life();

	}

	@Override
	public void mouseClicked(MouseEvent event) {
		
	}

	@Override
	public void mousePressed(MouseEvent event) {
		
	}

	@Override
	public void mouseReleased(MouseEvent event) {
		System.out.println(event.getX() + "," + event.getY());
		double width = (double)panel.getWidth() / cells[0].length;
		double height = (double)panel.getHeight() / cells.length;
		int column = Math.min(cells[0].length - 1, (int)(event.getX() / width));
		int row = Math.min(cells.length - 1, (int)(event.getY() / height));
		System.out.println(column + "," + row);
		cells[row][column] = !cells[row][column];
		frame.repaint();
		
	}

	
	public void actionPerformed(ActionEvent event) {
		if (event.getSource().equals(step)) {
			System.out.println("Step");
			step();
		}
		if (event.getSource().equals(start)) {
			System.out.println("Start");			
			if (running == false) {
				running = true;
				Thread t = new Thread(this);
				t.start();
				}
		}
		if (event.getSource().equals(stop)) {
			System.out.println("Stop");
			running = false;
		}		
	}
	
	public void run() {
		while (running == true) {
			step();
			try {
				Thread.sleep(100);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
	}
		
	
	/*
	 * row-1,column-1			row-1,column			row-1,column+1
	 * row,column-1				row,column				row,column+1
	 * row+1,column-1			row+1,column			row+1,column+1
	 */
	
	
	public void step() {
		boolean[][] nextCells = new boolean[cells.length][cells[0].length];
		for (int row = 0; row < cells.length; row++) {
			for(int column = 0; column < cells[0].length; column++) {
				int neighborCount = 0;
				if (row > 0 && column > 0 && cells[row-1][column-1] == true) { // up left
					neighborCount++;
				}
				if (row > 0 && cells[row-1][column] == true) { //up
					neighborCount++;
				}
				if (row > 0 && column < cells[0].length-1 && cells[row-1][column+1] == true) { //up right
					neighborCount++;
				}
				if (column > 0 && cells[row][column-1] == true) {//left
					neighborCount++;
				}
				if (column<cells[0].length-1 && cells[row][column+1] == true) {//right
					neighborCount++;
				}
				if (row < cells.length-1 && column > 0 && cells[row+1][column-1] == true) {//down left
					neighborCount++;
				}
				if (row < cells.length-1 && cells[row+1][column] == true) {//down
					neighborCount++;
				}
				if (row < cells.length-1 && column < cells[0].length-1 && cells[row+1][column+1]) {//down right
					neighborCount++;
				}
				//Rules of Life
				if (cells[row][column] == true) { //alive
					if (neighborCount == 2 || neighborCount == 3) {
						nextCells[row][column] = true; // alive next round
					} else {
						nextCells[row][column] = false; // dead next round
					}
				}
				else { //dead
					if (neighborCount == 3) {
						nextCells[row][column] = true; //alive next round
					} else {
						nextCells[row][column] = false; //dead next round
					}
					
					
				}
				
			}
			
			
		}
		cells = nextCells;
		panel.setCells(cells);
		frame.repaint();
	}

	@Override
	public void mouseEntered(MouseEvent event) {
		
	}

	@Override
	public void mouseExited(MouseEvent event) {
		
		
	}
	
	
}


// if alive:
// 0 or 1 neighbors = die
// 2 or 3 neighbors = survives
// 4+ neighbors == dies


// if dead:
// 3 neighbors = becomes populated

/*
 * Every cell checks neighbors and calcs whether it will be alive next round
 * all cells are changed each round, calculation occurs again
 * 
 * 
 * reqs:
 * uses jPanel (overwrite the paintComponent method)
 * should be able to click on individual cell to change it
 * 3 buttons in addition to the panel
 * Step button should show next gen and stop
 * continuously go through gens and display them
 * should stop a running simulation
 * use a 2D array to keep track of current state
 * work with boundary conditions (edges of grid)
 * comment code
 * 
 * 
 * 
*/


